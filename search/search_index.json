{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"DKAN Tools This CLI application provides tools for implementing, developing, and maintaining DKAN , the Drupal-based open data catalog. For Drupal 7.x projects use the 1.x branch. Requirements DKAN Tools was designed with a Docker -based local development environment in mind. Current requirements are simply: Bash-like shell that can execute .sh files (Linux or OS X terminals should all work) Docker Docker Compose That's it! All other dependencies are included in the Docker containers that dkan-tools will create. Basic usage Once you are working in an initialized project folder, you can type dktl at any time to see a list of all available commands. Available commands: deploy Performs common tasks when switching databases or code bases. help Displays help for a command init Initialize DKAN project directory. install Perform Drupal/DKAN database installation list Lists commands make Get all necessary dependencies and \"make\" a working codebase. restore Restore files and database. dkan dkan:demo [demo] Create a new demo project. dkan:docs Build DKAN docs with doxygen. dkan:test-cypress Run DKAN Cypress Tests. dkan:test-dredd Run DKAN Dredd Tests. dkan:test-phpunit Run DKAN PhpUnit Tests. Additional phpunit CLI options can be passed. dkan:test-phpunit-coverage Run DKAN PhpUnit Tests and send a coverage report to CodeClimate. docker docker:compose [dc] Run a docker-compose command. E.g. \"dktl docker:compose ps\". docker:proxy-connect [proxy:connect] Connect the web container to the proxy. docker:proxy-kill [proxy:kill] Kill the dktl proxy service. docker:url [url] Display the http web URL for the current project. exec exec:composer [composer] Proxy to composer. exec:drush [drush] Run drush command on current site. frontend frontend:build Build frontend app. frontend:get Download the DKAN frontend app to src/frontend. frontend:install Download frontend app if not present, and run npm install. frontend:test Run cypress tests on the frontend app. git git:config Configure git in current environment with user name and email. git:deploy Deploy code including gitignored files to branch of same name on Acquia. git:remove-submodules Recurse through docroot and vendor and delete all .git dirs. init init:dkan Add DKAN as a dependency to the project composer.json. init:drupal Create a new Drupal project in the current directory. install install:sample Install DKAN sample content. make make:symlinks Create symlinks from docroot to folders in src. restore restore:db Restore the database from a backup. restore:files Restore a files archive to appropriate site directories. restore:grab-database Create a database dump excluding devel and datastore tables. xdebug xdebug:start Start xdebug on CLI and web containers. xdebug:stop Stop xdebug on CLI and web containers. Running without Docker If for some reason you would like to use some of DKTL without docker, there is a mechanism to accomplish this. First of all, make sure that you have all of the software DKTL needs: PHP Composer Drush The mode in which DKTL runs is controlled by an environment variable: DKTL_MODE . To run DKLT without docker set the environment variable to HOST : export DKTL_MODE=\"HOST\" To go back to running in docker mode, set the variable to DOCKER (or just delete it). Automated Proxy: DKAN-tools leverages traefik to route traffic based on a per-environment domain name. Traefik is run as a singleton service named dktl-proxy . dktl-proxy will serve your website from a constructed domain in the form of \"{{dktl-slug}}.localtest.me\", where dktl-slug is the per project string identifying the current environment. If your project directory is dkan, the project will be served at //dkan.localtest.me","title":"DKAN Tools"},{"location":"index.html#dkan-tools","text":"This CLI application provides tools for implementing, developing, and maintaining DKAN , the Drupal-based open data catalog. For Drupal 7.x projects use the 1.x branch.","title":"DKAN Tools"},{"location":"index.html#requirements","text":"DKAN Tools was designed with a Docker -based local development environment in mind. Current requirements are simply: Bash-like shell that can execute .sh files (Linux or OS X terminals should all work) Docker Docker Compose That's it! All other dependencies are included in the Docker containers that dkan-tools will create.","title":"Requirements"},{"location":"index.html#basic-usage","text":"Once you are working in an initialized project folder, you can type dktl at any time to see a list of all available commands. Available commands: deploy Performs common tasks when switching databases or code bases. help Displays help for a command init Initialize DKAN project directory. install Perform Drupal/DKAN database installation list Lists commands make Get all necessary dependencies and \"make\" a working codebase. restore Restore files and database. dkan dkan:demo [demo] Create a new demo project. dkan:docs Build DKAN docs with doxygen. dkan:test-cypress Run DKAN Cypress Tests. dkan:test-dredd Run DKAN Dredd Tests. dkan:test-phpunit Run DKAN PhpUnit Tests. Additional phpunit CLI options can be passed. dkan:test-phpunit-coverage Run DKAN PhpUnit Tests and send a coverage report to CodeClimate. docker docker:compose [dc] Run a docker-compose command. E.g. \"dktl docker:compose ps\". docker:proxy-connect [proxy:connect] Connect the web container to the proxy. docker:proxy-kill [proxy:kill] Kill the dktl proxy service. docker:url [url] Display the http web URL for the current project. exec exec:composer [composer] Proxy to composer. exec:drush [drush] Run drush command on current site. frontend frontend:build Build frontend app. frontend:get Download the DKAN frontend app to src/frontend. frontend:install Download frontend app if not present, and run npm install. frontend:test Run cypress tests on the frontend app. git git:config Configure git in current environment with user name and email. git:deploy Deploy code including gitignored files to branch of same name on Acquia. git:remove-submodules Recurse through docroot and vendor and delete all .git dirs. init init:dkan Add DKAN as a dependency to the project composer.json. init:drupal Create a new Drupal project in the current directory. install install:sample Install DKAN sample content. make make:symlinks Create symlinks from docroot to folders in src. restore restore:db Restore the database from a backup. restore:files Restore a files archive to appropriate site directories. restore:grab-database Create a database dump excluding devel and datastore tables. xdebug xdebug:start Start xdebug on CLI and web containers. xdebug:stop Stop xdebug on CLI and web containers. Running without Docker If for some reason you would like to use some of DKTL without docker, there is a mechanism to accomplish this. First of all, make sure that you have all of the software DKTL needs: PHP Composer Drush The mode in which DKTL runs is controlled by an environment variable: DKTL_MODE . To run DKLT without docker set the environment variable to HOST : export DKTL_MODE=\"HOST\" To go back to running in docker mode, set the variable to DOCKER (or just delete it).","title":"Basic usage"},{"location":"index.html#automated-proxy","text":"DKAN-tools leverages traefik to route traffic based on a per-environment domain name. Traefik is run as a singleton service named dktl-proxy . dktl-proxy will serve your website from a constructed domain in the form of \"{{dktl-slug}}.localtest.me\", where dktl-slug is the per project string identifying the current environment. If your project directory is dkan, the project will be served at //dkan.localtest.me","title":"Automated Proxy:"},{"location":"add_dkan.html","text":"Adding DKAN to an existing Drupal Site composer require 'getdkan/dkan' dktl drush en dkan dktl dkan:sample-content:create dktl frontend:install dktl frontend:build","title":"Add DKAN to an existing site"},{"location":"add_dkan.html#adding-dkan-to-an-existing-drupal-site","text":"composer require 'getdkan/dkan' dktl drush en dkan dktl dkan:sample-content:create dktl frontend:install dktl frontend:build","title":"Adding DKAN to an existing Drupal Site"},{"location":"backups.html","text":"Database and file backups Restoring a database dump or site files DKAN Tools' restore commands can restore from a local or remote dump of the database, as well as restore a files archive. This simplest way to do this is: dktl dkan:restore --db_url=<path_to_db> --files_url=<path_to_files> As described below, these options can be stored in a configuration file so that you can simply type dktl restore . You may also restore from a local database backup, as long as it is placed in a folder under the project root called /backups . Type dktl db:restore with no argument, and the backup in /backups will be restored if there is only one, or you will be allowed to select from a list if there are several. Configuring DKTL commands You will probably want to set up some default arguments for certain commands, especially the urls for the restore command. This is what the dkan.yml file is for. You can provide options for any DKTL command in dkan.yml. For instance: command: restore: options: db_url: \"s3://my-backups-bucket/my-db.sql.gz\" files_url: \"s3://my-backups-bucket/my-files.tar.gz\" If you include this in your dktl.yml file, typing dktl restore without any arguments will load these two options. Create and grab a database dump excluding tables You can create a database dump excluding tables related to cache, devel, webform submissions and DKAN datastore. Running the command dktl site:grab-database @alias will create the database backup for the drush alias passed as argument. This command needs to be run with DKTL_MODE set to \"HOST\". So you'll need to run export DKTL_MODE=\"HOST\" and after the command finishes, you should set it back to its old value or just unset the variable by running unset DKTL_MODE . If you want to import this dump into your local development site, then you can move the file excluded_tables.sql into the directory backups in the root of your project, then you'll be able to import it by running dktl restore:db excluded_tables.sql .","title":"Database and file backups"},{"location":"backups.html#database-and-file-backups","text":"","title":"Database and file backups"},{"location":"backups.html#restoring-a-database-dump-or-site-files","text":"DKAN Tools' restore commands can restore from a local or remote dump of the database, as well as restore a files archive. This simplest way to do this is: dktl dkan:restore --db_url=<path_to_db> --files_url=<path_to_files> As described below, these options can be stored in a configuration file so that you can simply type dktl restore . You may also restore from a local database backup, as long as it is placed in a folder under the project root called /backups . Type dktl db:restore with no argument, and the backup in /backups will be restored if there is only one, or you will be allowed to select from a list if there are several.","title":"Restoring a database dump or site files"},{"location":"backups.html#configuring-dktl-commands","text":"You will probably want to set up some default arguments for certain commands, especially the urls for the restore command. This is what the dkan.yml file is for. You can provide options for any DKTL command in dkan.yml. For instance: command: restore: options: db_url: \"s3://my-backups-bucket/my-db.sql.gz\" files_url: \"s3://my-backups-bucket/my-files.tar.gz\" If you include this in your dktl.yml file, typing dktl restore without any arguments will load these two options.","title":"Configuring DKTL commands"},{"location":"backups.html#create-and-grab-a-database-dump-excluding-tables","text":"You can create a database dump excluding tables related to cache, devel, webform submissions and DKAN datastore. Running the command dktl site:grab-database @alias will create the database backup for the drush alias passed as argument. This command needs to be run with DKTL_MODE set to \"HOST\". So you'll need to run export DKTL_MODE=\"HOST\" and after the command finishes, you should set it back to its old value or just unset the variable by running unset DKTL_MODE . If you want to import this dump into your local development site, then you can move the file excluded_tables.sql into the directory backups in the root of your project, then you'll be able to import it by running dktl restore:db excluded_tables.sql .","title":"Create and grab a database dump excluding tables"},{"location":"docker_config.html","text":"Modifying the Docker containers By default, dkan-tools will run docker containers with everything needed for a DKAN site to run. Sometimes we need to modify those docker containers. A common example of these kinds of modification is adding an environment variable to the web, or cli containers. dkan-tools provides a mechanism to do just this. The configuration that dkan-tools uses to start the docker containers is in assets/docker in the dkan-tools repo. To make changes to that configuration, you can add a file named docker-compose.overrides.yml to the src/docker directory in your project . Any valid docker-compose configuration can be added to that file and it will be merged with the default configuration from assets/docker/docker-compose.common.yml before the containers are created. Seeing your configuration After adding your file and making configuration changes you will have to remove and recreate your containers, you can do this by running dktl dc kill && dktl dc rm && dktl","title":"Modifying the Docker containers"},{"location":"docker_config.html#modifying-the-docker-containers","text":"By default, dkan-tools will run docker containers with everything needed for a DKAN site to run. Sometimes we need to modify those docker containers. A common example of these kinds of modification is adding an environment variable to the web, or cli containers. dkan-tools provides a mechanism to do just this. The configuration that dkan-tools uses to start the docker containers is in assets/docker in the dkan-tools repo. To make changes to that configuration, you can add a file named docker-compose.overrides.yml to the src/docker directory in your project . Any valid docker-compose configuration can be added to that file and it will be merged with the default configuration from assets/docker/docker-compose.common.yml before the containers are created. Seeing your configuration After adding your file and making configuration changes you will have to remove and recreate your containers, you can do this by running dktl dc kill && dktl dc rm && dktl","title":"Modifying the Docker containers"},{"location":"extend.html","text":"Custom Commands Projects to can define their own commands. To create a custom command, add a file named CustomCommands.php and add it to src/command/ , create a new class in the file with a similar structure to this one: <?php namespace DkanTools\\Custom; /** * This is project's console commands configuration for Robo task runner. * * @see http://robo.li/ */ class CustomCommands extends \\Robo\\Tasks { /** * Sample. */ public function customSample() { $this->io()->comment(\"Hello World!!!\"); } } The critical parts of the example are: The namespace The extension of \\Robo\\Tasks The name of the file for the class should match the class name. In this case the file name should be CustomCommands.php Everything else (class names, function names) is flexible, and each public function inside of the class will show up as an available dktl command. Advanced configuration Disabling chown DKTL, by default, performs most of its tasks inside of a docker container. The result is that any files created by scripts running inside the container will appear to be owned by \"root\" on the host machine, which often leads to permission issues when trying to use these files. To avoid this DKTL attempts to give ownership of all project files to the user running DKTL when it detects that files have changed, using the chown command via sudo . In some circumstances, such as environments where sudo is not available, you may not want this behavior. This can be controlled by setting a true/false environment variable, DKTL_CHOWN . To disable the chown behavior, create the environment variable with this command: export DKTL_CHOWN=\"FALSE\" Configuration Brought into the Containers from the Host Machine. Unless you are running in \"HOST\" mode, DKTL runs inside of docker containers. Some configuration from your host machine can be useful inside of the containers: ssh configuration, external services authentication tokens, etc. DKTL recognized this and by default makes some configurations available to the containers by default. If any of these directories exist in your current user's profile, they will be available in the container: * .ssh * .aws * .composer","title":"Custom commands"},{"location":"extend.html#custom-commands","text":"Projects to can define their own commands. To create a custom command, add a file named CustomCommands.php and add it to src/command/ , create a new class in the file with a similar structure to this one: <?php namespace DkanTools\\Custom; /** * This is project's console commands configuration for Robo task runner. * * @see http://robo.li/ */ class CustomCommands extends \\Robo\\Tasks { /** * Sample. */ public function customSample() { $this->io()->comment(\"Hello World!!!\"); } } The critical parts of the example are: The namespace The extension of \\Robo\\Tasks The name of the file for the class should match the class name. In this case the file name should be CustomCommands.php Everything else (class names, function names) is flexible, and each public function inside of the class will show up as an available dktl command.","title":"Custom Commands"},{"location":"extend.html#advanced-configuration","text":"","title":"Advanced configuration"},{"location":"extend.html#disabling-chown","text":"DKTL, by default, performs most of its tasks inside of a docker container. The result is that any files created by scripts running inside the container will appear to be owned by \"root\" on the host machine, which often leads to permission issues when trying to use these files. To avoid this DKTL attempts to give ownership of all project files to the user running DKTL when it detects that files have changed, using the chown command via sudo . In some circumstances, such as environments where sudo is not available, you may not want this behavior. This can be controlled by setting a true/false environment variable, DKTL_CHOWN . To disable the chown behavior, create the environment variable with this command: export DKTL_CHOWN=\"FALSE\"","title":"Disabling chown"},{"location":"extend.html#configuration-brought-into-the-containers-from-the-host-machine","text":"Unless you are running in \"HOST\" mode, DKTL runs inside of docker containers. Some configuration from your host machine can be useful inside of the containers: ssh configuration, external services authentication tokens, etc. DKTL recognized this and by default makes some configurations available to the containers by default. If any of these directories exist in your current user's profile, they will be available in the container: * .ssh * .aws * .composer","title":"Configuration Brought into the Containers from the Host Machine."},{"location":"frontend.html","text":"Decoupled frontend Download the DKAN frontend app to src/frontend. By default DKAN uses data-catalog-app for the front end application, as specified in the composer.json file: \"extra\": { \"dkan-frontend\": { \"type\": \"vcs\", \"url\": \"https://github.com/GetDKAN/data-catalog-app\", \"ref\": \"1.0.3\" } } To download it simply run: dktl frontend:get If you would like to use a specific tag, branch or commit of data-catalog-app, you can add that change manually to your DKAN composer.json file or run: dktl frontend:get --ref=BranchName To use an entirely different frontend application, pass the github URL: dktl frontend:get --url=https://github.com/org/alternate-frontend","title":"Decoupled frontend"},{"location":"frontend.html#decoupled-frontend","text":"","title":"Decoupled frontend"},{"location":"frontend.html#download-the-dkan-frontend-app-to-srcfrontend","text":"By default DKAN uses data-catalog-app for the front end application, as specified in the composer.json file: \"extra\": { \"dkan-frontend\": { \"type\": \"vcs\", \"url\": \"https://github.com/GetDKAN/data-catalog-app\", \"ref\": \"1.0.3\" } } To download it simply run: dktl frontend:get If you would like to use a specific tag, branch or commit of data-catalog-app, you can add that change manually to your DKAN composer.json file or run: dktl frontend:get --ref=BranchName To use an entirely different frontend application, pass the github URL: dktl frontend:get --url=https://github.com/org/alternate-frontend","title":"Download the DKAN frontend app to src/frontend."},{"location":"installation.html","text":"Installation Download or clone this repository into any location on your development machine. Add bin/dktl to your $PATH . This is often accomplished by adding a symbolic link to a folder already in your path, like ~/bin . For instance, if DKAN Tools is located in /myworkspace : ln -s /myworkspace/dkan-tools/bin/dktl ~/bin/dktl Alternatively, you could add /myworkspace/dkan-tools/bin directly to your $PATH . Enter this in your terminal or add it to your session permanently by adding a line in .bashrc or .bash_profile : export PATH=$PATH:/myworkspace/dkan-tools/bin DKAN Quick-Start Demo Create a project directory, initialize the project and run the demo script. mkdir my_project && cd my_project dktl init dktl demo This will set up the Drupal backend with sample content and build the frontend app to demonstrate how a standard site would function. To get a better idea of how DKAN and DKAN-tools work, you may want to follow the more detailed steps in the next section.","title":"Installation"},{"location":"installation.html#installation","text":"Download or clone this repository into any location on your development machine. Add bin/dktl to your $PATH . This is often accomplished by adding a symbolic link to a folder already in your path, like ~/bin . For instance, if DKAN Tools is located in /myworkspace : ln -s /myworkspace/dkan-tools/bin/dktl ~/bin/dktl Alternatively, you could add /myworkspace/dkan-tools/bin directly to your $PATH . Enter this in your terminal or add it to your session permanently by adding a line in .bashrc or .bash_profile : export PATH=$PATH:/myworkspace/dkan-tools/bin","title":"Installation"},{"location":"installation.html#dkan-quick-start-demo","text":"Create a project directory, initialize the project and run the demo script. mkdir my_project && cd my_project dktl init dktl demo This will set up the Drupal backend with sample content and build the frontend app to demonstrate how a standard site would function. To get a better idea of how DKAN and DKAN-tools work, you may want to follow the more detailed steps in the next section.","title":"DKAN Quick-Start Demo"},{"location":"maintenance.html","text":"Primary Maintenance Tasks A DKAN site does not differ substantially from maintaining other Drupal sites . By \"maintenance\" we mean three specific tasks Upgrading DKAN to receive new features and bug-fixes Adding additional modules or features Overriding current modules or functionally Getting DKAN Updates DKAN uses a slightly modified semantic versioning system. Major.Minor.Patch Major indicates compatibility Minor indicates backwards compatible new features or upgrades Patch indicates a release for security updates and bug fixes Please note you can not use drush up with DKAN . This is because DKAN is not packaged on Drupal.org. Basic Upgrades If you are maintaining your site with DKAN Tools , upgrading is as simple as running dktl composer require 'getdkan/dkan:2.1.0' Or edit the version number in your composer.json file: \"require\": { \"getdkan/dkan\": \"2.0.0\" } and run composer update Upgrading DKAN from 7.x-1.x to 8.x-2.x The easiest method will be to stand up a fresh Drupal 8 DKAN site and harvest the datasets from your Drupal 7 DKAN site. A more detailed upgrade path will be documented soon. Adding modules to your project dktl composer require 'drupal/group:1.2'","title":"Site Maintenance"},{"location":"maintenance.html#primary-maintenance-tasks","text":"A DKAN site does not differ substantially from maintaining other Drupal sites . By \"maintenance\" we mean three specific tasks Upgrading DKAN to receive new features and bug-fixes Adding additional modules or features Overriding current modules or functionally","title":"Primary Maintenance Tasks"},{"location":"maintenance.html#getting-dkan-updates","text":"DKAN uses a slightly modified semantic versioning system. Major.Minor.Patch Major indicates compatibility Minor indicates backwards compatible new features or upgrades Patch indicates a release for security updates and bug fixes Please note you can not use drush up with DKAN . This is because DKAN is not packaged on Drupal.org.","title":"Getting DKAN Updates"},{"location":"maintenance.html#basic-upgrades","text":"If you are maintaining your site with DKAN Tools , upgrading is as simple as running dktl composer require 'getdkan/dkan:2.1.0' Or edit the version number in your composer.json file: \"require\": { \"getdkan/dkan\": \"2.0.0\" } and run composer update","title":"Basic Upgrades"},{"location":"maintenance.html#upgrading-dkan-from-7x-1x-to-8x-2x","text":"The easiest method will be to stand up a fresh Drupal 8 DKAN site and harvest the datasets from your Drupal 7 DKAN site. A more detailed upgrade path will be documented soon.","title":"Upgrading DKAN from 7.x-1.x to 8.x-2.x"},{"location":"maintenance.html#adding-modules-to-your-project","text":"dktl composer require 'drupal/group:1.2'","title":"Adding modules to your project"},{"location":"newproject.html","text":"Starting a new project, step-by-step To start a project with DKAN tools, create a project directory. mkdir my_project && cd my_project Inside the project directory, initialize your project. dktl init Using a specific version of DKAN Define the tag or branch on this command (e.g. dktl init --dkan=branch-name ). By itself, the init command will use the latest release of DKAN. Make a full Drupal/DKAN codebase, primarily using composer (Options are passed directly to composer install , see documentation ). dktl make make options: --prefer-source --prefer-dist --no-dev --optimize-autoloader Install. Creates a database, installs Drupal, and enables DKAN. dktl install install options: --existing-config Add this option to preserve existing configuration. Add the front end. dktl frontend:install dktl frontend:build Access the site. dktl drush uli Stop the docker-compose project, removing all containers and networks. dktl down This will keep files downloaded during the make phase, as well as any changes made to them. But any database will be removed and all content lost.","title":"Starting a new project"},{"location":"newproject.html#starting-a-new-project-step-by-step","text":"To start a project with DKAN tools, create a project directory. mkdir my_project && cd my_project Inside the project directory, initialize your project. dktl init Using a specific version of DKAN Define the tag or branch on this command (e.g. dktl init --dkan=branch-name ). By itself, the init command will use the latest release of DKAN. Make a full Drupal/DKAN codebase, primarily using composer (Options are passed directly to composer install , see documentation ). dktl make make options: --prefer-source --prefer-dist --no-dev --optimize-autoloader Install. Creates a database, installs Drupal, and enables DKAN. dktl install install options: --existing-config Add this option to preserve existing configuration. Add the front end. dktl frontend:install dktl frontend:build Access the site. dktl drush uli Stop the docker-compose project, removing all containers and networks. dktl down This will keep files downloaded during the make phase, as well as any changes made to them. But any database will be removed and all content lost.","title":"Starting a new project, step-by-step"},{"location":"patching.html","text":"Patching If it is necessary or expedient to overwrite files in DKAN or Drupal core, it is recommended that you create a /src/patches directory where you can store local patch files with the changes. A patch will make it possible to re-apply these changes once a newer version of DKAN or Drupal is applied to your project. Update your project composer.json \"require\": { \"cweagans/composer-patches\": \"~1.0\" }, \"extra\": { \"enable-patching\": true, \"patches\": { \"drupal/core\": { \"1234\": \"https://www.drupal.org/files/issues/1234-thing-to-fix.patch\" }, \"getdkan/dkan\": { \"000\": \"https://patch-diff.githubusercontent.com/raw/GetDKAN/dkan/pull/000.patch\", \"bugfix info\": \"src/patches/localfile.patch\" } } } then run: dktl composer update dktl composer update --lock","title":"Patching"},{"location":"patching.html#patching","text":"If it is necessary or expedient to overwrite files in DKAN or Drupal core, it is recommended that you create a /src/patches directory where you can store local patch files with the changes. A patch will make it possible to re-apply these changes once a newer version of DKAN or Drupal is applied to your project. Update your project composer.json \"require\": { \"cweagans/composer-patches\": \"~1.0\" }, \"extra\": { \"enable-patching\": true, \"patches\": { \"drupal/core\": { \"1234\": \"https://www.drupal.org/files/issues/1234-thing-to-fix.patch\" }, \"getdkan/dkan\": { \"000\": \"https://patch-diff.githubusercontent.com/raw/GetDKAN/dkan/pull/000.patch\", \"bugfix info\": \"src/patches/localfile.patch\" } } } then run: dktl composer update dktl composer update --lock","title":"Patching"},{"location":"structure.html","text":"File structure of a DKAN-Tools-based project One of the many reasons for using DKTL is to create a clear separation between the code specific to a particular DKAN site (i.e. \"custom code\") and the dependencies we pull in from other sources (primarily, DKAN core and Drupal core). Keep all of your custom code in the src directory and symlink the overrides to the appropriate directory inside docroot. This will make maintaining your DKAN site much easier. DKAN Tools will set up the symlinks for you. To accomplish this separation, DKAN Tools projects will have the following basic directory structure, created when we run dktl init . \u251c\u2500\u2500 backups # Optional for local development, see the DB backups section \u251c\u2500\u2500 docroot # Drupal core | \u2514\u2500\u2500 modules | \u2514\u2500\u2500 contrib | \u2514\u2500\u2500 dkan # The upstream DKAN core codebase | \u251c\u2500\u2500 src # Site-specific configuration, code and files. \u2502 \u251c\u2500\u2500 modules # Symlinked to docroot/modules/custom \u2502 \u251c\u2500\u2500 script # Deployment script and other misc utilities | \u2514\u2500\u2500 site # Symlinked to docroot/sites/default \u2502 \u2502 \u2514\u2500\u2500 files # The main site files \u2502 \u251c\u2500\u2500 test # Custom tests | \u2514\u2500\u2500 themes # Symlinked to docroot/themes/custom \u2514\u2500\u2500 dktl.yml # DKAN Tools configuration The src/site folder Most configuration in Drupal sites is placed in the /sites/default directory. The /src/site folder will replace /docroot/sites/default once Drupal is installed. /src/site should then contain all of the configuration that will be in /docroot/sites/default . DKTL should have already provided some things in /src/site : settings.php contains some generalized code that is meant to load any other setting files present, as long as they follow the settings. \\<something> .php pattern. All of the special settings that you previously had in settings.php or other drupal configuration files should live in settings.custom.php or a similarly-named file in /src/site . The src/test folder (custom tests) DKAN Tools supports custom Cypress tests found in the src/test/cypress directory. To run custom tests: dktl test:cypress","title":"File structure of a DKAN-Tools-based project"},{"location":"structure.html#file-structure-of-a-dkan-tools-based-project","text":"One of the many reasons for using DKTL is to create a clear separation between the code specific to a particular DKAN site (i.e. \"custom code\") and the dependencies we pull in from other sources (primarily, DKAN core and Drupal core). Keep all of your custom code in the src directory and symlink the overrides to the appropriate directory inside docroot. This will make maintaining your DKAN site much easier. DKAN Tools will set up the symlinks for you. To accomplish this separation, DKAN Tools projects will have the following basic directory structure, created when we run dktl init . \u251c\u2500\u2500 backups # Optional for local development, see the DB backups section \u251c\u2500\u2500 docroot # Drupal core | \u2514\u2500\u2500 modules | \u2514\u2500\u2500 contrib | \u2514\u2500\u2500 dkan # The upstream DKAN core codebase | \u251c\u2500\u2500 src # Site-specific configuration, code and files. \u2502 \u251c\u2500\u2500 modules # Symlinked to docroot/modules/custom \u2502 \u251c\u2500\u2500 script # Deployment script and other misc utilities | \u2514\u2500\u2500 site # Symlinked to docroot/sites/default \u2502 \u2502 \u2514\u2500\u2500 files # The main site files \u2502 \u251c\u2500\u2500 test # Custom tests | \u2514\u2500\u2500 themes # Symlinked to docroot/themes/custom \u2514\u2500\u2500 dktl.yml # DKAN Tools configuration","title":"File structure of a DKAN-Tools-based project"},{"location":"structure.html#the-srcsite-folder","text":"Most configuration in Drupal sites is placed in the /sites/default directory. The /src/site folder will replace /docroot/sites/default once Drupal is installed. /src/site should then contain all of the configuration that will be in /docroot/sites/default . DKTL should have already provided some things in /src/site : settings.php contains some generalized code that is meant to load any other setting files present, as long as they follow the settings. \\<something> .php pattern. All of the special settings that you previously had in settings.php or other drupal configuration files should live in settings.custom.php or a similarly-named file in /src/site .","title":"The src/site folder"},{"location":"structure.html#the-srctest-folder-custom-tests","text":"DKAN Tools supports custom Cypress tests found in the src/test/cypress directory. To run custom tests: dktl test:cypress","title":"The src/test folder (custom tests)"},{"location":"troubleshooting.html","text":"Troubleshooting Using Xdebug When using the standard docker-compose environment, Xdebug can be enabled on both the web and CLI containers as needed. Running it creates a significant performance hit, so it is disabled by default. To enable, simply run dktl xdebug:start . A new xdebug.ini file will be added to /src/docker/etc/php , and the corresponding containers will restart. In most situations, this file should be excluded from version control with .gitignore. To turn off Xdebug, run dktl xdebug:stop , the .ini file will be removed and the container restarted. Inspect the containers dktl dc exec web bash dktl dc exec cli bash View logs dktl dc logs db Error messages Error Solution UnixHTTPConnectionPool(host='localhost', port=None): Read timed out. Restart Docker No container found for cli_1 Find dangling container and remove it: docker ps -a && docker stop [container-id] && docker rm -v [container-name] PHP Warning: is_file(): Unable to find the wrapper \"s3\" Delete the vendor directory in your local dkan-tools and run dktl in your project directory hanging ownership of new files to host user ... chown: ...: illegal group name Disable the chown behavior `export DKTL_CHOWN=\"FALSE\"","title":"Troubleshooting"},{"location":"troubleshooting.html#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting.html#using-xdebug","text":"When using the standard docker-compose environment, Xdebug can be enabled on both the web and CLI containers as needed. Running it creates a significant performance hit, so it is disabled by default. To enable, simply run dktl xdebug:start . A new xdebug.ini file will be added to /src/docker/etc/php , and the corresponding containers will restart. In most situations, this file should be excluded from version control with .gitignore. To turn off Xdebug, run dktl xdebug:stop , the .ini file will be removed and the container restarted.","title":"Using Xdebug"},{"location":"troubleshooting.html#inspect-the-containers","text":"dktl dc exec web bash dktl dc exec cli bash","title":"Inspect the containers"},{"location":"troubleshooting.html#view-logs","text":"dktl dc logs db","title":"View logs"},{"location":"troubleshooting.html#error-messages","text":"Error Solution UnixHTTPConnectionPool(host='localhost', port=None): Read timed out. Restart Docker No container found for cli_1 Find dangling container and remove it: docker ps -a && docker stop [container-id] && docker rm -v [container-name] PHP Warning: is_file(): Unable to find the wrapper \"s3\" Delete the vendor directory in your local dkan-tools and run dktl in your project directory hanging ownership of new files to host user ... chown: ...: illegal group name Disable the chown behavior `export DKTL_CHOWN=\"FALSE\"","title":"Error messages"}]}